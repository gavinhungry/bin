#!/usr/bin/env node

const bodyParser = require('body-parser');
const child_process = require('child_process');
const express = require('express');
const objectHash = require('object-hash');
const fs = require('fs');

const PORT = 9999;

const API_KEY = process.env['USERSCRIPT_BRIDGE_API_KEY'];
if (!API_KEY) {
  console.error('USERSCRIPT_BRIDGE_API_KEY environment variable not set');
  process.exit();
}

const writeJsonToCacheFile = (pathName, data) => {
  return fs.writeFileSync(
    `${process.env.XDG_CACHE_HOME}/${pathName}`,
    JSON.stringify(data, null, 2) + '\n',
    {
      mode: 0o600
    }
  );
};

const CACHE = {};

const ACTION = {
  /*
   * Open URL from Chrome PWAs in Firefox
   */
  open_fx_url: (res, data) => {
    if (!data) {
      return res.status(400).end();
    }

    child_process.exec(`/usr/bin/firefox "${data}"`);
  },

  /*
   * Record Teams state for external use
   */
  report_teams_state: (res, data) => {
    writeJsonToCacheFile('teams-state.json', data);
  },

  /*
   * Report outgoing Teams notifications (for desktop integration)
   */
  teams_notification: (res, data) => {
    writeJsonToCacheFile('teams-notification.json', data);
  },

  /*
   * Record YouTube Music metadata for external use
   */
  yt_music_metadata: (res, data, cache) => {
    if (data.beforeunload) {
      data = null;
    }

    let hash = objectHash(data);
    if (hash === cache.prev) {
      return;
    }

    cache.prev = hash;

    writeJsonToCacheFile(`yt-music-metadata.json`, data);
  }
};

const api = new express();
api.use(bodyParser());

api.post('/', async (req, res) => {
  if (req.headers.authorization !== API_KEY) {
    return res.status(401).end();
  }

  let { action } = req.body;
  if (!Object.hasOwn(ACTION, action)) {
    return res.status(400).end();
  }

  let { data = null } = req.body;

  if (!Object.hasOwn(CACHE, action)) {
    CACHE[action] = {};
  };

  let cache = CACHE[action];

  console.log(action);
  await ACTION[action](res, data, cache);

  res.status(200).end();
});

// reverse proxied as https://bridge.localhost
api.listen(PORT, () => {
  console.debug(`Listening on port ${PORT}`);
});
