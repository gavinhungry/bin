#!/usr/bin/env node

const DBus = require('dbus');
const pify = require('pify');
const prawner = require('prawner');

const BUSYLIGHT_PATH = (
  process.env.BUSYLIGHT_PATH ||
  '/usr/bin/busylight'
);

const STATUS_COLOR_MAP = {
  available: '#022A02',
  away: '#331000',
  busy: '#010326',
  unavailable: '#2A0101',
  'do-not-disturb': '#2A0101',
  'be-right-back': '#1A1A1A',
  invisible: '#000'
};

let bus = DBus.getBus('session');
let purple;

/**
 * Resolve a promise after a timeout
 *
 * @param {Number} [ms]
 * @return {Promise}
 */
let sleep = (ms = 0) => new Promise(resolve => {
  setTimeout(resolve, ms);
});

/**
 * Get DBus interface
 *
 * @param {Object} [opts]
 * @param {String} [opts.serviceName]
 * @param {String} [opts.objectPath]
 * @param {String} [opts.interfaceName]
 * @return {Promise.<Object>} DBus session interface with promise methods
 */
let getInterface = async ({
  serviceName,
  objectPath,
  interfaceName
} = {}) => {
  return new Promise((res, rej) => {
    bus.getInterface(
      serviceName,
      objectPath,
      interfaceName,
      (err, interface) => err ? rej(err) : res(pify(interface))
    );
  });
};

/**
 * Execute a busylight command
 *
 * @param {String} cmd
 * @return {Promise}
 */
let runBusylightCommand = async cmd => prawner(`${BUSYLIGHT_PATH} ${cmd}`);

/**
 * Turn off busylight
 *
 * @return {Promise}
 */
let setBusylightOff = async () => runBusylightCommand('off');

/**
 * Set busylight to specific color string
 *
 * @param {String} color
 * @return {Promise}
 */
let setBusylightColor = async color => runBusylightCommand(`on "${color}"`);

/**
 * Set busylight to color based on status ID
 *
 * @param {String} [statusId]
 * @return {Promise}
 */
let setBusylightColorByStatusId = async statusId => {
  let statusColor = STATUS_COLOR_MAP[statusId];
  console.debug({ statusId, statusColor });

  if (!statusColor) {
    return;
  }

  return setBusylightColor(statusColor);
};

/**
 * Get current status ID
 *
 * @return {Promise.<String>}
 */
let getCurrentStatusId = async () => {
  let savedStatus = await purple.PurpleSavedstatusGetCurrent();
  let statusType = await purple.PurpleSavedstatusGetType(savedStatus);
  return purple.PurplePrimitiveGetIdFromType(statusType);
};

/**
 * Set busylight to color based on current status
 *
 * @return {Promise}
 */
let setBusylightColorByCurrentStatus = async () => {
  let statusId = await getCurrentStatusId();
  await setBusylightColorByStatusId(statusId);
};

let main = async () => {
  while (!purple) {
    purple = await getInterface({
      serviceName: 'im.pidgin.purple.PurpleService',
      objectPath: '/im/pidgin/purple/PurpleObject',
      interfaceName: 'im.pidgin.purple.PurpleInterface'
    }).catch(async () => {
      console.debug('Could not open purple dbus interface');
      setBusylightOff();
      await sleep(2000);
    });
  }

  await setBusylightColorByCurrentStatus();

  purple.on('AccountStatusChanged', async (account, prevStatus, status) => {
    let statusId = await purple.PurpleStatusGetId(status);
    await setBusylightColorByStatusId(statusId);
  });

  purple.on('AccountSignedOn', async () => {
    await setBusylightColorByCurrentStatus();
  });

  purple.on('AccountSignedOff', async () => {
    await setBusylightOff();
  });
};

main().catch(err => {
  console.error(err);
  process.exit(1);
});
