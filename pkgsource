#!/bin/bash

set -euo pipefail

source $(dirname "${BASH_SOURCE[0]}")/abash/abash.sh
([ $# -eq 0 ] || arge help) && usage '[options] PKGNAME [PKGNAME...]

  -t, --testing     fetch from [testing] repository
  -k, --trunk       fetch trunk
  -p, --pkgbuild    only fetch PKGBUILD and supporting files
  -r, --raw         symlink to sources in-tree (remain in tmpdir)
  -h, --help        this message
'

export GNUPGHOME=/etc/pacman.d/gnupg

ARCH_DEVEL="$HOME/devel/arch"
ABS_DEVEL="$ARCH_DEVEL/abs"
AUR_DEVEL="$ARCH_DEVEL/aur"

[ -d "$ABS_DEVEL" ] || mkdir -p "$ABS_DEVEL"
[ -d "$AUR_DEVEL" ] || mkdir -p "$AUR_DEVEL"

GIT_URL='git://git.archlinux.org/svntogit'
AUR_URL="https://aur.archlinux.org"
AUR_RPC="$AUR_URL/rpc.php?v=5&type"

getPkgProp() {
  local PKG=$1
  local PROP=$2

  pacman -Si "$PKG" 2> /dev/null | grep ^"$PROP" | awk '{print $NF}'
}

getAbsPkgbuild() {
  local PKG=$(expac -S '%e' $1)
  [ "$PKG" == '(null)' ] && PKG=$1

  local TMP=$(tmpdir "$PKG")
  cd "$TMP"

  local REPO=$(getPkgProp "$PKG" Repository)
  local ARCH=$(getPkgProp "$PKG" Architecture)
  arge testing && REPO=testing

  local GIT_REPO=packages
  [ $REPO == 'community' -o $REPO == 'multilib' ] && GIT_REPO=community

  local GIT_PKG_PATH="repos/$REPO-$ARCH"
  arge trunk:k && GIT_PKG_PATH="trunk"

  msg "fetching $REPO/$PKG"
  if ! git clone "$GIT_URL/$GIT_REPO.git" --single-branch -b packages/"$PKG"; then
    warn 'Git fetch failed'
    return
  fi

  [ -d "$ABS_DEVEL/$PKG" ] && warn "path $ABS_DEVEL/$PKG already exists"

  if arge raw; then
    ln -s "$TMP/$GIT_REPO/$GIT_PKG_PATH" "$ABS_DEVEL/$PKG"
  else
    cp -r "$GIT_REPO/$GIT_PKG_PATH" "$ABS_DEVEL/$PKG"
  fi

  if ! arge pkgbuild; then
    cd "$ABS_DEVEL/$PKG"
    arge pkgbuild || makepkg -ors --noconfirm
  fi

  msg "$REPO/$PKG sources ready in ${ABS_DEVEL#$HOME/}/$PKG"
}

getAurPkgbuild() {
  local PKG=$1
  local TMP=$(tmpdir "$PKG")
  cd "$TMP"

  local TAR_URL=$(curl -LfGs --data-urlencode "arg=$PKG" "$AUR_RPC=info" | jq -r .results[0].URLPath)
  if [ -z "$TAR_URL" -o "$TAR_URL" == 'null' ]; then
    err "$PKG not found in AUR"
    return
  fi

  msg "fetching aur/$PKG"

  if arge raw; then
    git clone "$AUR_URL/$PKG".git
    ln -s "$TMP/$PKG" "$AUR_DEVEL/$PKG"
  else
    local TAR_FILE=$(basename "$TAR_URL")
    wget -q "${AUR_URL}${TAR_URL}" -O "$TAR_FILE"
    tar xfvz "$TAR_FILE" -C "$AUR_DEVEL"
  fi

  cd "$AUR_DEVEL/$PKG"

  arge pkgbuild || makepkg -ors --noconfirm
  msg "aur/$PKG sources ready in ${AUR_DEVEL#$HOME/}/$PKG"
}

for PKG in $(nfargs); do
  [ "$PKG" != "$(fnfarg)" ] && echo

  [ $(getPkgProp "$PKG" Repository) == 'aur' ] &&
    getAurPkgbuild "$PKG" ||
    getAbsPkgbuild "$PKG"
done

arge raw || tmpdirclean
