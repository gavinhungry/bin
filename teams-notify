#!/usr/bin/env python

from pylon import *

import os
import signal

import dbus
from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import GLib, Gtk

import warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)

class TeamsNotify:
  def __init__(self):
    self.TEAMS_APP_NAME = 'Microsoft Teams'

    self.TEAMS_WM_CLASS = 'teams.microsoft.com'
    self.TEAMS_ICON_ONLINE  = 'teams-online'
    self.TEAMS_ICON_NOTIFY  = 'teams-notify'

    self.ICON_CHECK_DURATION = 2000
    self.ICON_FLASH_DURATION = 500

    self.init_icon()
    self.init_dbus()
    GLib.MainLoop().run()

  #
  def init_icon(self):
    self.flash_timer = None

    self.icon = Gtk.StatusIcon()
    self.reset_icon()

    self.icon.set_tooltip_text(self.TEAMS_APP_NAME)
    self.icon.connect('activate', self.on_icon_click)

    GLib.timeout_add(self.ICON_CHECK_DURATION, self.check_icon)

  #
  def init_dbus(self):
    bus = dbus.SessionBus()
    bus.add_match_string('interface=org.freedesktop.Notifications,member=Notify,eavesdrop=true')
    bus.add_message_filter(self.handle_dbus_notification)

  #
  def on_icon_click(self, icon):
    window_ids = get_window_ids_by_wm_class(self.TEAMS_WM_CLASS)
    activate_window_by_id(window_ids[0], True)

  #
  def is_teams_running(self):
    try:
      window_ids = get_window_ids_by_wm_class(self.TEAMS_WM_CLASS)
      return len(window_ids) > 0
    except:
      return False

  #
  def is_teams_focused(self):
    try:
      active_window_id = get_active_window_id()
      return window_id_has_wm_class(active_window_id, self.TEAMS_WM_CLASS)
    except:
      return False

  #
  def handle_dbus_notification(self, bus, msg):
    args = msg.get_args_list()
    if len(args) < 5:
      return

    if 'teams.microsoft.com' in args[4]:
      self.flash_icon(True)

  #
  def reset_icon(self):
    self.flash_icon(False)
    self.icon.set_visible(False)
    self.icon.set_from_icon_name(self.TEAMS_ICON_ONLINE)

  #
  def check_icon(self):
    if self.is_teams_running():
      self.icon.set_visible(True)
    else:
      self.reset_icon()

    return True

  #
  def flash_icon(self, should_flash):
    if self.is_teams_focused() or not self.is_teams_running():
      should_flash = False

    if not should_flash:
      if self.flash_timer != None:
        GLib.source_remove(self.flash_timer)
        self.flash_timer = None

      self.icon.set_from_icon_name(self.TEAMS_ICON_ONLINE)

      return

    if self.flash_timer != None:
      return

    self.icon.set_from_icon_name(self.TEAMS_ICON_NOTIFY)
    self.icon.set_visible(True)

    self.flash_timer = GLib.timeout_add(self.ICON_FLASH_DURATION, self.update_icon)

  #
  def update_icon(self):
    if self.is_teams_focused():
      self.flash_icon(False)
      return False

    self.icon.set_from_icon_name(
      self.TEAMS_ICON_NOTIFY
      if self.icon.get_icon_name() != self.TEAMS_ICON_NOTIFY
      else self.TEAMS_ICON_ONLINE
    )

    return True

if __name__ == '__main__':
  signal.signal(signal.SIGINT, signal.SIG_DFL)
  TeamsNotify()
